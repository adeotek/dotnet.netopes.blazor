@using NodaTime;
@using NodaTimePicker;
@using System.Globalization
@inject IStringLocalizer<DateTimePicker> Localizer

<div class="input-group">
    <input type="text" class="@_cssClass" value="@_stringValue" @onchange="OnDateInputChange" @onfocus="OnDateInputFocus" />
    <div class="input-group-append datepicker-btn" @onclick="OnDatePickerToggle">
        <span class="input-group-text">
            <i class="fas fa-calendar"></i>
        </span>
    </div>
</div>
<DatePicker SelectedDate="@_dtValue" Visible=@_isDatePickerVisible OnSelected="OnDateTimeSelected" OnCleared="OnDateTimeCleared" OnClosed="OnDatePickerClosed" ShowClear="true" ShowClose="true" ShowToday="true" DisplayDaysOfWeek="true" FirstDayOfWeek="IsoDayOfWeek.Monday" FormatProvider="@CultureInfo.CurrentCulture" ClearText="@Localizer["DatePicker:Clear"]" TodayText="@Localizer["DatePicker:Today"]" CloseText="@Localizer["DatePicker:Close"]" />

@code {
    private bool _isDatePickerVisible { get; set; }
    private bool _changeHandled { get; set; }
    private DateTime? _value { get; set; }
    private string _stringValue => _value?.ToString(Format);
    private LocalDate? _dtValue => _value == null ? (LocalDate?) null : LocalDate.FromDateTime((DateTime) _value);
    private string _cssClass => string.IsNullOrEmpty(CssClass) ? "form-control text-center" : $"form-control text-center {CssClass}";
    
    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public string Format { get; set; }
    [Parameter]
    public DateTime? Value
    {
        get => _value;
        set
        {
            if (_value.Equals(value))
            {
                return;
            }
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<DateTime?> ValueChanged { get; set; }

    private void OnDateTimeSelected(LocalDate localDate)
    {
        if (_changeHandled)
        {
            _changeHandled = false;
        }
        else
        {
            Value = localDate.ToDateTimeUnspecified();
            _isDatePickerVisible = false;            
        }
        StateHasChanged();
    }

    private void OnDateTimeCleared()
    {
        Value = null;
        _isDatePickerVisible = false;
        StateHasChanged();
    }

    private void OnDatePickerToggle()
    {
        _isDatePickerVisible = !_isDatePickerVisible;
    }

    private void OnDatePickerClosed()
    {
        _isDatePickerVisible = false;
    }

    private void OnDateInputChange(ChangeEventArgs e)
    {
        DateTime? newValue;
        try
        {
            if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
            {
                newValue = null;
            }
            else if (DateTime.TryParse(e.Value.ToString(), out var parsedValue))
            {
                newValue = parsedValue;
            }
            else
            {
                newValue = null;
            }
        }
        catch (Exception)
        {
            newValue = null;
        }

        _changeHandled = true;
        Value = newValue;
    }

    private void OnDateInputFocus()
    {
        _isDatePickerVisible = true;
    }
}