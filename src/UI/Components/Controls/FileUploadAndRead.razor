@using System.IO
<div class="upload-drop-zone blazor-ui">
    @if (MultiFileUpload)
    {
        <InputFile OnChange="@OnFilesUploadedHandleAsync" multiple />
    }
    else
    {
        <InputFile OnChange="@OnFilesUploadedHandleAsync"/>
    }
    @_status
</div>

@code {
    private string _status { get; set; }
    private List<(IBrowserFile, string)> _uploadedFiles { get; } = new();

    [Parameter]
    public string DefaultMessage { get; set; }
    [Parameter]
    public string UploadingMessage { get; set; } = "Uploading...";
    [Parameter]
    public int MaxFileSize { get; set; } = 5 * 1024 * 1024; // Maximum Size of 5MB
    [Parameter]
    public bool MultiFileUpload { get; set; } = true;
    [Parameter]
    public int MaxAllowedFiles { get; set; } = 3;
    [Parameter]
    public EventCallback<(IBrowserFile file, string content)> OnFileUploadedEventCallback { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<(IBrowserFile file, string content)>> OnFilesUploadedEventCallback { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _status = DefaultMessage;
    }

    private async Task OnFilesUploadedHandleAsync(InputFileChangeEventArgs e)
    {
        _status = UploadingMessage;
        _uploadedFiles.Clear();
       
        if (MultiFileUpload)
        {
            foreach (var file in e.GetMultipleFiles(MaxAllowedFiles))
            {
                await ProcessUploadedFileAsync(file);
            }
        }
        else
        {
            await ProcessUploadedFileAsync(e.File);
        }
        
        if (_uploadedFiles.Count == 0)
        {
            _status = "No files uploaded";
            return;
        }

        if (OnFilesUploadedEventCallback.HasDelegate)
        {
            await OnFilesUploadedEventCallback.InvokeAsync(_uploadedFiles);
        }

        _status = DefaultMessage;
    }

    private async Task ProcessUploadedFileAsync(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        
        if (file.Size > MaxFileSize)
        {
            _status = $"{_status} <br/>\"{file.Name}\" is too big. Max file size is {MaxFileSize.ToString()} bytes.";
            return;
        }
        
        using var reader = new StreamReader(file.OpenReadStream(MaxFileSize));
        var content = await reader.ReadToEndAsync();
        _uploadedFiles.Add((file, content));
        
        if (OnFileUploadedEventCallback.HasDelegate)
        {
            await OnFileUploadedEventCallback.InvokeAsync((file, content));
        }
    }
}