@using Toolbelt.Blazor.Forms
@inject IStringLocalizer<PasswordChangeModal> Localizer;

@if (IsVisible)
{
    <div class="modal fade show" id="loggedInUserChangePassword" tabindex="-1" aria-modal="true" role="dialog" aria-hidden="true" style="display:block">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@Localizer["ChangePassword"]</h4>
                    <button type="button" class="close" @onclick="CloseModalAsync">&times;</button>
                </div>
                <EditForm Model="@Model" OnValidSubmit="ValidSubmitAsync">
                    <LocalizedDataAnnotationsValidator />
                    <div class="modal-body">
                        @if (!HideCurrentPassword)
                        {
                            <div class="form-group col-12">
                                <label class="required">@Localizer["CurrentPassword"]</label>
                                <InputText @bind-Value="@Model.CurrentPassword" class="form-control" type="password"/>
                            </div>
                            <hr/>
                        }
                        <div class="form-group col-12">
                            <label class="required">@Localizer["NewPassword"]</label>
                            <InputText @bind-Value="@Model.NewPassword" class="form-control" type="password"/>
                        </div>
                        <div class="form-group col-12">
                            <label class="required">@Localizer["ConfirmPassword"]</label>
                            <InputText @bind-Value="@Model.ConfirmPassword" class="form-control" type="password"/>
                        </div>
                        <div class="form-group col-12">
                            <ValidationSummary/>
                            @if ((Messages?.Count ?? 0) > 0)
                            {
                                <ul>
                                    @foreach (var message in Messages)
                                    {
                                        <li class="@(message.IsError ? "text-danger" : "text-success")">@message.Message</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">@Localizer["Submit"]</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModalAsync">@Localizer["Cancel"]</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private PasswordChangeInput Model { get; set; } = new PasswordChangeInput();
    
    [Parameter]
    public bool IsVisible { get; set; }
    [Parameter]
    public List<TextMessage> Messages { get; set; } = new List<TextMessage>();
    [Parameter]
    public bool HideCurrentPassword { get; set; }
    [Parameter]
    public EventCallback CloseCallback { get; set; }
    [Parameter]
    public EventCallback<PasswordChangeInput> ValidSubmitCallback { get; set; }
    
    private async Task CloseModalAsync()
    {
        IsVisible = false;
        await CloseCallback.InvokeAsync(null);
    }
    
    private async Task ValidSubmitAsync()
    {
        await ValidSubmitCallback.InvokeAsync(Model);
    }
}